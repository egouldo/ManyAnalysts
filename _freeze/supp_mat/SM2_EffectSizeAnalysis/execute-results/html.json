{
  "hash": "b95b003f1955fa93b43d8dbffc3d5755",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Effect Size Analysis\"\nformat: html\neditor: visual\nnumber-sections: true\ncode-fold: true\nexecute:\n  freeze: auto  # re-render only when source changes\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(targets)\nlibrary(withr)\nlibrary(here)\nlibrary(tidyverse)\nlibrary(performance)\nlibrary(broom.mixed)\nlibrary(gt)\nlibrary(lme4)\nlibrary(MuMIn)\nlibrary(ManyEcoEvo)\nlibrary(ggrepel)\nset.seed(1234)\n```\n:::\n\n::: {.cell eavl='true'}\n\n```{.r .cell-code}\nManyEcoEvo_results <- \n  ManyEcoEvo_results %>% \n  mutate(effects_analysis = \n           map(effects_analysis, \n               rename, \n               id_col = study_id)) #%>% \n  # mutate_at(c(\"data\", \n  #             \"diversity_data\", \n  #             \"diversity_indices\", \n  #             \"effects_analysis\"),\n  #           .funs = ~ map(.x, anonymise_teams,\n  #                         TeamIdentifier_lookup))\n```\n:::\n\n\n## Meta-analysis\n\n### Effect Sizes $Z_r$\n\n#### Effect of categorical review rating\n\nThe figures below (@fig-euc-cat-ratings-MA,@fig-bt-cat-ratings-MA) shows the fixed effect of categorical review rating on deviation from the meta-analytic mean.\nThere is very little difference in deviation for analyses in any of the review categories.\nIt is worth noting that each analysis features multiple times in these figures corresponding to the multiple reviewers that provided ratings.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Orchard plot of meta-analytic model fitted to all eucalyptus analyses with a fixed effect for categorical peer-review ratings, and random effects for analyst ID and reviewer ID. Black circles denote coefficient mean for each categorical publishability rating. Thick error bars represent 95% confidence intervals and whiskers indicate 95% prediction intervals. Effect sizes are represented by circles and their size corresponds to the precision of the estimate.](SM2_EffectSizeAnalysis_files/figure-html/fig-euc-cat-ratings-MA-1.png){#fig-euc-cat-ratings-MA width=768}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Orchard plot of meta-analytic model fitted to all blue tit analyses with a fixed effect for categorical peer-review ratings, and random effects for analyst ID and reviewer ID. Black circles denote coefficient mean for each categorical publishability rating. Thick error bars represent 95% confidence intervals and whiskers indicate 95% prediction intervals. Effect sizes are represented by circles and their size corresponds to the precision of the estimate.](SM2_EffectSizeAnalysis_files/figure-html/fig-bt-cat-ratings-MA-1.png){#fig-bt-cat-ratings-MA width=768}\n:::\n:::\n\n\n#### Post-hoc analysis: Exploring the effect of removing analyses with poor peer-review ratings on heterogeneity\n\nIn @fig-all-forest-plots-Zr we display the results of our post-hoc analysis, examining the effect of removing analyses that were reviewed at least once as being 'unpublishable', 'unpublishable' or requiring 'major revisions', as compared with retaining the full set of analyses.\nRemoving these analyses from the blue tit data had little impact on the overall amount of deviation or the distribution of the results.\nFor the *Eucalytpus* analyses, removing 'unpublishable' analyses meant dropping the outlier 'Brooklyn-2-2-1' which made a substantial difference to the amount of observerd deviation from the meta-analytic mean.\n\n\n::: {.cell .column-body-outset-right}\n::: {.cell-output-display}\n![Forest plots of meta-analytic estimated standardized effect sizes ($Zr$, blue circles) and their 95% confidence intervals for each effect size included in the meta-analysis model. The meta-analytic mean effect size is denoted by a black triangle and a dashed vertical line, with error bars also representing the 95% confidence interval. The solid black vertical line demarcates effect size of 0, indicating no relationship between the test variable and the response variable. The left side of each panel shows the analysis team names (anonymous arbitrary names assigned by us), each followed by three numbers. The first number is the submission ID (some analyst teams submitted results to us on >1 submission form), the second number is the analysis ID (some analyst teams included results of >1 analysis in a given submission), and the third number is the effect ID (some analysts submitted values for >1 effect per analysis). Thus, each row in each forest plot is uniquely identified, but it is possible to determine which effects come from which analyses and which analysis teams. The plots in the top row depict effects from analyses of blue tit data, and the bottom row plots depict effects from analyses of Eucalyptus data. The right-most plots depict all usable effect sizes. The, plots on the left side exclude effects from analysis sets that received at least one rating of “unpublishable” from peer reviewers, and the plots in the middle exclude effects from analysis sets that received at least one rating of either “unpublishable” or “major revision” from peer reviewers.](SM2_EffectSizeAnalysis_files/figure-html/fig-all-forest-plots-Zr-1.png){#fig-all-forest-plots-Zr width=960}\n:::\n:::\n\n\n#### Post-hoc analysis: Exploring the effect of excluding estimates in which we had reduced confidence\n\nFor each dataset (blue tit, *Eucalyptus*), we created a second, more conservative version, that excluded effects based on estimates of $df$ that we considered less reliable (@tbl-Zr-exclusion-subsetting).\nWe compared the outcomes of analyses of the primary dataset (constituted according to our registered plan) with the outcomes of analyses of the more conservative version of the dataset.\nWe also compared results from analyses of both of these versions of the dataset to versions with our post-hoc removal of outliers described in the main text.\nOur more conservative exclusions (based on unreliable estimates of $df$) had minimal impact on the meta-analytic mean for both blue tit and *Eucalyptus* analyses, regardless of whether outliers were excluded (@tbl-Zr-exclusion-subsetting).\n\n\n::: {#tbl-Zr-exclusion-subsetting .cell tbl-cap='Estimated meta-analytic mean, standard error, and 95% confidence intervals, from analyses of the primary data set, the more conservative version of the dataset which excluded effects based on less reliable estimates of $df$, and both of these datasets with outliers removed.'}\n\n```{.r .cell-code}\nManyEcoEvo_viz %>% \n    dplyr::filter(estimate_type == \"Zr\", \n                  model_name == \"MA_mod\") %>% \n  hoist(tidy_mod_summary) %>% \n  unnest(tidy_mod_summary) %>% \n    filter(publishable_subset == \"All\", expertise_subset == \"All\") %>% \n  select(-publishable_subset, -expertise_subset) %>% \n  select(dataset, \n         exclusion_set, \n         estimate, \n         std.error, \n         statistic, \n         p.value, \n         starts_with(\"conf\")) %>% \n  mutate(exclusion_set = \n           case_when(exclusion_set == \"complete\" ~ \n                       \"Primary dataset\",\n                     exclusion_set == \"complete-rm_outliers\" ~ \n                       \"Primary dataset, outliers removed\",\n                     exclusion_set == \"partial\" ~ \n                       \"Conservative exclusions\",\n                     TRUE ~ \"Conservative exclusions, outliers removed\")) %>% \ngroup_by(exclusion_set) %>% \n  gt::gt() %>% \n  gt::opt_stylize(style = 6, color = \"gray\") %>% \n  gt::fmt(columns = \"p.value\",\n          fns = function(x) gtsummary::style_pvalue(x, prepend_p = FALSE)) %>% \n  gt::fmt_number(columns = c(-p.value, -dataset)) %>% \n  gt::cols_label(estimate = gt::md(\"$$\\\\hat\\\\mu$$\"), \n                 std.error = gt::md(\"$$SE[\\\\hat\\\\mu]$$\"),\n                 conf.low = gt::md(\"95\\\\%CI\")) %>% \n  gt::cols_merge(columns = starts_with(\"conf\"), \n                 pattern = \"[{1},{2}]\") %>% \n  gt::cols_move(columns = conf.low, after = std.error) \n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"pzveloiefp\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#pzveloiefp table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#pzveloiefp thead, #pzveloiefp tbody, #pzveloiefp tfoot, #pzveloiefp tr, #pzveloiefp td, #pzveloiefp th {\n  border-style: none;\n}\n\n#pzveloiefp p {\n  margin: 0;\n  padding: 0;\n}\n\n#pzveloiefp .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#pzveloiefp .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#pzveloiefp .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#pzveloiefp .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#pzveloiefp .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#pzveloiefp .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n}\n\n#pzveloiefp .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#pzveloiefp .gt_col_heading {\n  color: #FFFFFF;\n  background-color: #5F5F5F;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#pzveloiefp .gt_column_spanner_outer {\n  color: #FFFFFF;\n  background-color: #5F5F5F;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#pzveloiefp .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#pzveloiefp .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#pzveloiefp .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#pzveloiefp .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#pzveloiefp .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#pzveloiefp .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  vertical-align: middle;\n}\n\n#pzveloiefp .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#pzveloiefp .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#pzveloiefp .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: none;\n  border-top-width: 1px;\n  border-top-color: #D5D5D5;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D5D5D5;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D5D5D5;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#pzveloiefp .gt_stub {\n  color: #333333;\n  background-color: #D5D5D5;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D5D5D5;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#pzveloiefp .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#pzveloiefp .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#pzveloiefp .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#pzveloiefp .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#pzveloiefp .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #5F5F5F;\n}\n\n#pzveloiefp .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#pzveloiefp .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n}\n\n#pzveloiefp .gt_grand_summary_row {\n  color: #333333;\n  background-color: #D5D5D5;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#pzveloiefp .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #5F5F5F;\n}\n\n#pzveloiefp .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #5F5F5F;\n}\n\n#pzveloiefp .gt_striped {\n  background-color: #F4F4F4;\n}\n\n#pzveloiefp .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n}\n\n#pzveloiefp .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#pzveloiefp .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#pzveloiefp .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#pzveloiefp .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#pzveloiefp .gt_left {\n  text-align: left;\n}\n\n#pzveloiefp .gt_center {\n  text-align: center;\n}\n\n#pzveloiefp .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#pzveloiefp .gt_font_normal {\n  font-weight: normal;\n}\n\n#pzveloiefp .gt_font_bold {\n  font-weight: bold;\n}\n\n#pzveloiefp .gt_font_italic {\n  font-style: italic;\n}\n\n#pzveloiefp .gt_super {\n  font-size: 65%;\n}\n\n#pzveloiefp .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#pzveloiefp .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#pzveloiefp .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#pzveloiefp .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#pzveloiefp .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#pzveloiefp .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#pzveloiefp .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    \n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"dataset\">dataset</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"$$\\hat\\mu$$\">$$\\hat\\mu$$</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"$$SE[\\hat\\mu]$$\">$$SE[\\hat\\mu]$$</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"95%CI\">95%CI</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"statistic\">statistic</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"p.value\">p.value</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr class=\"gt_group_heading_row\">\n      <th colspan=\"6\" class=\"gt_group_heading\" scope=\"colgroup\" id=\"Primary dataset\">Primary dataset</th>\n    </tr>\n    <tr class=\"gt_row_group_first\"><td headers=\"Primary dataset  dataset\" class=\"gt_row gt_left\">blue tit</td>\n<td headers=\"Primary dataset  estimate\" class=\"gt_row gt_right\">−0.35</td>\n<td headers=\"Primary dataset  std.error\" class=\"gt_row gt_right\">0.03</td>\n<td headers=\"Primary dataset  conf.low\" class=\"gt_row gt_right\">[−0.41,−0.28]</td>\n<td headers=\"Primary dataset  statistic\" class=\"gt_row gt_right\">−10.49</td>\n<td headers=\"Primary dataset  p.value\" class=\"gt_row gt_right\"><0.001</td></tr>\n    <tr><td headers=\"Primary dataset  dataset\" class=\"gt_row gt_left gt_striped\">eucalyptus</td>\n<td headers=\"Primary dataset  estimate\" class=\"gt_row gt_right gt_striped\">−0.09</td>\n<td headers=\"Primary dataset  std.error\" class=\"gt_row gt_right gt_striped\">0.06</td>\n<td headers=\"Primary dataset  conf.low\" class=\"gt_row gt_right gt_striped\">[−0.22,0.03]</td>\n<td headers=\"Primary dataset  statistic\" class=\"gt_row gt_right gt_striped\">−1.47</td>\n<td headers=\"Primary dataset  p.value\" class=\"gt_row gt_right gt_striped\">0.14</td></tr>\n    <tr class=\"gt_group_heading_row\">\n      <th colspan=\"6\" class=\"gt_group_heading\" scope=\"colgroup\" id=\"Conservative exclusions\">Conservative exclusions</th>\n    </tr>\n    <tr class=\"gt_row_group_first\"><td headers=\"Conservative exclusions  dataset\" class=\"gt_row gt_left\">blue tit</td>\n<td headers=\"Conservative exclusions  estimate\" class=\"gt_row gt_right\">−0.36</td>\n<td headers=\"Conservative exclusions  std.error\" class=\"gt_row gt_right\">0.03</td>\n<td headers=\"Conservative exclusions  conf.low\" class=\"gt_row gt_right\">[−0.42,−0.29]</td>\n<td headers=\"Conservative exclusions  statistic\" class=\"gt_row gt_right\">−10.50</td>\n<td headers=\"Conservative exclusions  p.value\" class=\"gt_row gt_right\"><0.001</td></tr>\n    <tr><td headers=\"Conservative exclusions  dataset\" class=\"gt_row gt_left gt_striped\">eucalyptus</td>\n<td headers=\"Conservative exclusions  estimate\" class=\"gt_row gt_right gt_striped\">−0.11</td>\n<td headers=\"Conservative exclusions  std.error\" class=\"gt_row gt_right gt_striped\">0.07</td>\n<td headers=\"Conservative exclusions  conf.low\" class=\"gt_row gt_right gt_striped\">[−0.24,0.03]</td>\n<td headers=\"Conservative exclusions  statistic\" class=\"gt_row gt_right gt_striped\">−1.55</td>\n<td headers=\"Conservative exclusions  p.value\" class=\"gt_row gt_right gt_striped\">0.12</td></tr>\n    <tr class=\"gt_group_heading_row\">\n      <th colspan=\"6\" class=\"gt_group_heading\" scope=\"colgroup\" id=\"Primary dataset, outliers removed\">Primary dataset, outliers removed</th>\n    </tr>\n    <tr class=\"gt_row_group_first\"><td headers=\"Primary dataset, outliers removed  dataset\" class=\"gt_row gt_left\">blue tit</td>\n<td headers=\"Primary dataset, outliers removed  estimate\" class=\"gt_row gt_right\">−0.35</td>\n<td headers=\"Primary dataset, outliers removed  std.error\" class=\"gt_row gt_right\">0.03</td>\n<td headers=\"Primary dataset, outliers removed  conf.low\" class=\"gt_row gt_right\">[−0.42,−0.29]</td>\n<td headers=\"Primary dataset, outliers removed  statistic\" class=\"gt_row gt_right\">−10.95</td>\n<td headers=\"Primary dataset, outliers removed  p.value\" class=\"gt_row gt_right\"><0.001</td></tr>\n    <tr><td headers=\"Primary dataset, outliers removed  dataset\" class=\"gt_row gt_left gt_striped\">eucalyptus</td>\n<td headers=\"Primary dataset, outliers removed  estimate\" class=\"gt_row gt_right gt_striped\">−0.03</td>\n<td headers=\"Primary dataset, outliers removed  std.error\" class=\"gt_row gt_right gt_striped\">0.01</td>\n<td headers=\"Primary dataset, outliers removed  conf.low\" class=\"gt_row gt_right gt_striped\">[−0.06,0.00]</td>\n<td headers=\"Primary dataset, outliers removed  statistic\" class=\"gt_row gt_right gt_striped\">−2.23</td>\n<td headers=\"Primary dataset, outliers removed  p.value\" class=\"gt_row gt_right gt_striped\">0.026</td></tr>\n    <tr class=\"gt_group_heading_row\">\n      <th colspan=\"6\" class=\"gt_group_heading\" scope=\"colgroup\" id=\"Conservative exclusions, outliers removed\">Conservative exclusions, outliers removed</th>\n    </tr>\n    <tr class=\"gt_row_group_first\"><td headers=\"Conservative exclusions, outliers removed  dataset\" class=\"gt_row gt_left\">blue tit</td>\n<td headers=\"Conservative exclusions, outliers removed  estimate\" class=\"gt_row gt_right\">−0.36</td>\n<td headers=\"Conservative exclusions, outliers removed  std.error\" class=\"gt_row gt_right\">0.03</td>\n<td headers=\"Conservative exclusions, outliers removed  conf.low\" class=\"gt_row gt_right\">[−0.43,−0.30]</td>\n<td headers=\"Conservative exclusions, outliers removed  statistic\" class=\"gt_row gt_right\">−11.09</td>\n<td headers=\"Conservative exclusions, outliers removed  p.value\" class=\"gt_row gt_right\"><0.001</td></tr>\n    <tr><td headers=\"Conservative exclusions, outliers removed  dataset\" class=\"gt_row gt_left gt_striped\">eucalyptus</td>\n<td headers=\"Conservative exclusions, outliers removed  estimate\" class=\"gt_row gt_right gt_striped\">−0.04</td>\n<td headers=\"Conservative exclusions, outliers removed  std.error\" class=\"gt_row gt_right gt_striped\">0.02</td>\n<td headers=\"Conservative exclusions, outliers removed  conf.low\" class=\"gt_row gt_right gt_striped\">[−0.07,−0.01]</td>\n<td headers=\"Conservative exclusions, outliers removed  statistic\" class=\"gt_row gt_right gt_striped\">−2.52</td>\n<td headers=\"Conservative exclusions, outliers removed  p.value\" class=\"gt_row gt_right gt_striped\">0.012</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_forest <- function(data, intercept = TRUE, MA_mean = TRUE ){\n  if(MA_mean == FALSE){\n    data <- filter(data, term != \"Overall\")\n  }\n  \n    p <- ggplot(data, aes(y = term, \n                        x =  estimate, \n                        ymin = conf.low, \n                        ymax = conf.high,\n                        # shape = point_shape,\n                        colour = parameter_type)) +\n    geom_pointrange() +\n    ggforestplot::theme_forest() +\n    theme(axis.line = element_line(size = 0.10, colour = \"black\"),\n          axis.line.y = element_blank(),\n          text = element_text(family = \"Helvetica\"),\n          axis.text.y = element_blank()) +\n    guides(shape = \"none\", colour = \"none\") +\n    coord_flip() +\n    labs(y = \"Standardised Effect Size, Zr\",\n         x = element_blank()) +\n    scale_x_continuous(breaks = c(-4,-3,-2,-1,0,1),\n                       minor_breaks = seq(from = -4.5, to = 1.5, by = 0.5)) +\n    NatParksPalettes::scale_color_natparks_d(\"Glacier\")\n    \n    if(intercept == TRUE){\n      p <- p + geom_hline(yintercept = 0)\n    }\n    if(MA_mean == TRUE){\n      p <- p + geom_hline(aes(yintercept = meta_analytic_mean), \n                          data = data,\n                          colour = \"#01353D\", \n                          linetype = \"dashed\")\n    }\n    \n  return(p)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncomplete_euc_data <- \n  ManyEcoEvo_viz %>% \n  filter(exclusion_set == \"complete\", \n         estimate_type == \"Zr\", \n         model_name == \"MA_mod\",\n         dataset == \"eucalyptus\",\n         publishable_subset == \"All\") %>% \n  select(model) %>% \n  mutate(plot_data = map(model, \n                         .f = ~ broom::tidy(.x, \n                                            conf.int = TRUE, \n                                            include_studies = TRUE) %>% \n                           dplyr::mutate(point_shape = \n                                           ifelse(stringr::str_detect(term, \"overall\"), \n                                                  \"diamond\", \n                                                  \"circle\"),\n                                         Parameter = \n                                           forcats::fct_reorder(term, \n                                                                estimate) %>% \n                                           forcats::fct_reorder(., \n                                                                point_shape,\n                                                                .desc = TRUE))\n  ),\n  meta_analytic_mean = map_dbl(plot_data, \n                               ~ filter(.x, Parameter == \"overall\") %>% \n                                 pull(estimate))) %>% \n  select(plot_data, meta_analytic_mean) %>% \n  unnest(cols = c(\"plot_data\")) %>% \n  mutate(parameter_type = case_when(str_detect(Parameter, \"overall\") ~ \"mean\",\n                                    TRUE ~ \"study\"))\n\n# complete_euc_data <- \n#   complete_euc_data %>% \n#   rename(id_col = term) %>% \n#   group_by(type) %>%  \n#   group_split() %>% \n#   set_names(., complete_euc_data$type %>%  unique) %>% \n#   # map_if(.x = ., names(.) == \"study\",\n#          # .f = ~ anonymise_teams(.x, TeamIdentifier_lookup)) %>% \n#   bind_rows() %>% \n#   rename(term = id_col)\n\nmin_outlier_euc <- complete_euc_data %>% \n  filter(type == \"study\") %>% \n  slice_min(estimate, n = 3) %>% \n  pull(term)\n\nsample_size_euc_Zr <- ManyEcoEvo_results %>% \n    filter(exclusion_set == \"complete\", dataset == \"eucalyptus\") %>% \n    pluck(\"data\", 1) %>% \n    select(id_col, sample_size) %>% \n    rename(term = id_col) %>% \n    mutate(sample_size = as.numeric(sample_size))\n\nmean_n_euc_Zr <- sample_size_euc_Zr %>% \n  drop_na(sample_size) %>% \n  pull(sample_size) %>% \n  mean() %>% \n  round(2)\n\nN_outliers_Zr_euc <- sample_size_euc_Zr %>% \n  filter(term %in% min_outlier_euc) %>% \n   arrange(desc(sample_size))\n```\n:::\n\n\n#### Post-hoc analysis: Exploring the effect of including only analyses conducted by analysis teams with at least one member self-rated as \"highly proficient\" or \"expert\" in conducting statitistical analyses in their research area\n\n\n::: {#fig-forest-plot-expertise .cell}\n\n```{.r .cell-code}\nplot_forest <- function(data, intercept = TRUE, MA_mean = TRUE){\n  if (MA_mean == FALSE){\n    data <- filter(data, Parameter != \"overall\")\n  }\n  \n  p <- ggplot(data, aes(y = estimate, \n                        x =  term, \n                        ymin = conf.low, \n                        ymax = conf.high,\n                        shape = parameter_type,\n                        colour = parameter_type)) +\n    geom_pointrange(fatten = 2) +\n    ggforestplot::theme_forest() +\n    theme(axis.line = element_line(linewidth = 0.10, colour = \"black\"),\n          axis.line.y = element_blank(),\n          text = element_text(family = \"Helvetica\")#,\n          # axis.text.y = element_blank()\n    ) +\n    guides(shape = guide_legend(title = NULL), \n           colour = guide_legend(title = NULL)) +\n    coord_flip() +\n    ylab(bquote(Standardised~Effect~Size~Z[r])) +\n    xlab(element_blank()) +\n    # scale_y_continuous(breaks = c(-4,-3,-2,-1,0,1),\n    # minor_breaks = seq(from = -4.5, to = 1.5, by = 0.5)) +\n    NatParksPalettes::scale_color_natparks_d(\"Glacier\")\n  \n  if(intercept == TRUE){\n    p <- p + geom_hline(yintercept = 0)\n  }\n  if(MA_mean == TRUE){\n    p <- p + geom_hline(aes(yintercept = meta_analytic_mean), \n                        data = data,\n                        colour = \"#01353D\", \n                        linetype = \"dashed\")\n  }\n  \n  return(p)\n}\n\nbt_experts_only <- \n  ManyEcoEvo_viz %>% \n  filter(exclusion_set == \"complete\", \n         estimate_type == \"Zr\", \n         model_name == \"MA_mod\",\n         dataset == \"blue tit\",\n         publishable_subset == \"All\", \n         expertise_subset == \"expert\") %>% \n  select(model) %>% \n  mutate(plot_data = map(model, \n                         .f = ~ broom::tidy(.x, \n                                            conf.int = TRUE, \n                                            include_studies = TRUE)%>% \n                           dplyr::mutate(point_shape = \n                                           ifelse(stringr::str_detect(term, \"overall\"), \n                                                  \"diamond\", \n                                                  \"circle\"),\n                                         Parameter = \n                                           forcats::fct_reorder(term, \n                                                                estimate) %>% \n                                           forcats::fct_reorder(., \n                                                                point_shape,\n                                                                .desc = TRUE))\n  ),\n  meta_analytic_mean = map_dbl(plot_data, \n                               ~ filter(.x, Parameter == \"overall\") %>% \n                                 pull(estimate))) %>% \n  select(plot_data, meta_analytic_mean) %>% \n  unnest(cols = c(\"plot_data\")) %>% \n  mutate(parameter_type = case_when(str_detect(Parameter, \"overall\") ~ \"mean\",\n                                    TRUE ~ \"study\")) \n\n# bt_experts_only <- \n#   bt_experts_only %>% \n#   rename(id_col = term) %>% \n#   group_by(type) %>%  \n#   group_split() %>% \n#   set_names(., bt_experts_only$type %>%  unique) %>% \n#   # map_if(.x = ., names(.) == \"study\",\n#          # .f = ~ anonymise_teams(.x, TeamIdentifier_lookup)) %>% \n#   bind_rows() %>% \n#   rename(term = id_col)\n\nbt_forest_experts <- bt_experts_only %>% \n  arrange(desc(type)) %>% \n  mutate(type = forcats::as_factor(type)) %>% \n  group_by(type) %>% \n  arrange(desc(estimate),.by_group = TRUE) %>% \n  mutate(term = forcats::as_factor(term),\n         point_shape = case_when(str_detect(type, \"summary\") ~ \"mean\",\n                                 TRUE ~ \"study\")) %>% \n  plot_forest(intercept = TRUE, MA_mean = TRUE) +\n  theme(axis.text.x = element_text(size = 15), \n        axis.title.x = element_text(size = 15),\n        axis.text.y = element_blank()\n  ) +\n  scale_y_continuous(limits = c(-1.6, 0.65)) \n\neuc_experts_only <- \n  ManyEcoEvo_viz %>% \n  filter(exclusion_set == \"complete\", \n         estimate_type == \"Zr\", \n         model_name == \"MA_mod\",\n         dataset == \"eucalyptus\",\n         publishable_subset == \"All\",\n         expertise_subset == \"expert\") %>% \n  select(model) %>% \n  mutate(plot_data = map(model, \n                         .f = ~ broom::tidy(.x, \n                                            conf.int = TRUE, \n                                            include_studies = TRUE) %>% \n                           dplyr::mutate(point_shape = \n                                           ifelse(stringr::str_detect(term, \"overall\"), \n                                                  \"diamond\", \n                                                  \"circle\"),\n                                         Parameter = \n                                           forcats::fct_reorder(term, \n                                                                estimate) %>% \n                                           forcats::fct_reorder(., \n                                                                point_shape,\n                                                                .desc = TRUE))\n  ),\n  meta_analytic_mean = map_dbl(plot_data, \n                               ~ filter(.x, Parameter == \"overall\") %>% \n                                 pull(estimate))) %>% \n  select(plot_data, meta_analytic_mean) %>% \n  unnest(cols = c(\"plot_data\")) %>% \n  mutate(parameter_type = case_when(str_detect(Parameter, \"overall\") ~ \"mean\",\n                                    TRUE ~ \"study\"))\n\n\n# euc_experts_only <- \n#   euc_experts_only %>% \n#   rename(id_col = term) %>% \n#   group_by(type) %>%  \n#   group_split() %>% \n#   set_names(., euc_experts_only$type %>%  unique) %>% \n#   # map_if(.x = ., names(.) == \"study\",\n#          # .f = ~ anonymise_teams(.x, TeamIdentifier_lookup)) %>% \n#   bind_rows() %>% \n#   rename(term = id_col)\n\neuc_forest_experts <- euc_experts_only %>% \n  arrange(desc(type)) %>% \n  mutate(type = forcats::as_factor(type)) %>% \n  group_by(type) %>% \n  arrange(desc(estimate),.by_group = TRUE) %>% \n  mutate(term = forcats::as_factor(term),\n         point_shape = case_when(str_detect(type, \"summary\") ~ \"mean\",\n                                 TRUE ~ \"study\")) %>% \n  plot_forest(intercept = TRUE, MA_mean = TRUE) +\n  theme(axis.text.x = element_text(size = 15), \n        axis.title.x = element_text(size = 15),\n        axis.text.y = element_blank()\n  ) +\n  scale_y_continuous(limits = c(-5, 1), \n                     breaks = c(-5, -4, -3, -2, -1, 0, 1) )\n\n# ---- Extract Viz & Summary Stats\n\nbt_forest_experts\n\neuc_forest_experts\n```\n\n::: {.cell-output-display}\n![Blue tit dataset analyses](SM2_EffectSizeAnalysis_files/figure-html/fig-forest-plot-expertise-1.png){#fig-forest-plot-expertise-1 width=672}\n:::\n\n::: {.cell-output-display}\n![*Eucalyptus* dataset analyses](SM2_EffectSizeAnalysis_files/figure-html/fig-forest-plot-expertise-2.png){#fig-forest-plot-expertise-2 width=672}\n:::\n\nEstimated meta-analytic mean effect size ($Z_r$), standard error, and 95% confidence intervals, from analyses of the primary data set with at least one member self-rated as \"highly proficient\" or \"expert\" in conducting statistical analyses in their research area.\n:::\n\n\n### Out of sample predictions $y_i$\n\n#### Non-truncated $y_{i}$ meta-analysis forest plot\n\nBelow is the non-truncated version of @fig-euc-yi-forest-plot showing a forest plot of the out-of-sample predictions, $y_{i}$, on the response-scale (stems counts), for *Eucalyptus* analyses, showing the full error bars of all model estimates.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_forest_2 <- function(data, intercept = TRUE, MA_mean = TRUE, y_zoom = numeric(2L)){\n  if(MA_mean == FALSE){\n    data <- filter(data, study_id != \"overall\")\n  }\n  \n  plot_data <- data %>% \n    group_by(study_id) %>% \n    group_nest() %>% \n    hoist(data, \"estimate\",.remove = FALSE) %>% \n    hoist(estimate, y50 = 2) %>% \n    select(-estimate) %>% \n    unnest(data) %>% \n    arrange(desc(type)) %>% \n    mutate(type = forcats::as_factor(type)) %>% \n    group_by(type) %>% \n    arrange(desc(y50),.by_group = TRUE) %>% \n    mutate(study_id = forcats::as_factor(study_id),\n           point_shape = case_when(str_detect(type, \"summary\") ~ \"diamond\",\n                                   TRUE ~ \"circle\"))\n  \n  p <- ggplot(plot_data, aes(y = estimate, \n                        x =  study_id,\n                        ymin = conf.low, \n                        ymax = conf.high,\n                        # shape = type,\n                        shape = point_shape,\n                        colour = estimate_type\n                        )) +\n    geom_pointrange(position = position_dodge(width = 0.5)) +\n    ggforestplot::theme_forest() +\n    theme(axis.line = element_line(linewidth = 0.10, colour = \"black\"),\n          axis.line.y = element_blank(),\n          text = element_text(family = \"Helvetica\")) +\n    guides(shape = \"none\", colour = \"none\") +\n    coord_flip(ylim = y_zoom) +\n    labs(y = \"Model estimated out of sample predictions, stem counts\",\n         x = element_blank()) +\n    scale_y_continuous(breaks = scales::breaks_extended(10)) +\n    NatParksPalettes::scale_color_natparks_d(\"Glacier\") \n  \n  if(intercept == TRUE){\n    p <- p + geom_hline(yintercept = 0)\n  }\n  if(MA_mean == TRUE){\n    p <- p +\n      geom_hline(aes(yintercept = plot_data %>%\n                       filter(type == \"summary\", estimate_type == \"y25\") %>%\n                       pluck(\"estimate\")),\n                 data = data,\n                 colour = \"#01353D\",\n                 linetype = \"dashed\") +\n      geom_hline(aes(yintercept = plot_data %>%\n                       filter(type == \"summary\", estimate_type == \"y50\") %>%\n                       pluck(\"estimate\")),\n                 data = data,\n                 colour = \"#088096\",\n                 linetype = \"dashed\") +\n      geom_hline(aes(yintercept = plot_data %>%\n                       filter(type == \"summary\", estimate_type == \"y75\") %>%\n                       pluck(\"estimate\")),\n                 data = data,\n                 colour = \"#58B3C7\" ,\n                 linetype = \"dashed\")\n  }\n  \n  print(p)\n}\n\n# TODO put into R/ and build into package to call!\nfit_MA_mv <- function(effects_analysis, Z_colname, VZ_colname, estimate_type){\n  Zr <- effects_analysis %>%  pull({{Z_colname}})\n  VZr <- effects_analysis %>%  pull({{VZ_colname}})\n  mod <- ManyEcoEvo::fit_metafor_mv(estimate = Zr, \n                        variance = VZr, \n                        estimate_type = estimate_type, \n                        data = effects_analysis)\n  return(mod)\n}\n\nback_transformed_predictions <- \n  ManyEcoEvo_yi %>% \n  dplyr::mutate(data = \n                  purrr::map(data, \n                             ~ dplyr::filter(.x,\n                                             stringr::str_detect(response_variable_type, \"constructed\",                                                                       negate = TRUE)))) %>% \n  prepare_response_variables_yi(estimate_type = \"yi\",\n                                param_table = ManyEcoEvo:::analysis_data_param_tables) %>% \n  generate_yi_subsets()\n\n\nraw_mod_data_logged <- \n  back_transformed_predictions %>% \n  filter(dataset == \"eucalyptus\") %>%\n  group_by(estimate_type) %>% \n  select(estimate_type, data) %>% \n  unnest(data) %>% \n  rename(study_id = id_col) %>% \n  hoist(params, param_mean = list(\"value\", 1), param_sd = list(\"value\", 2)) %>% \n  rowwise() %>% \n  mutate(exclusion_threshold = param_mean + 3*param_sd) %>% \n  filter(fit < exclusion_threshold) %>% \n  mutate(log_vals = map2(fit, se.fit, log_transform, 1000)) %>% \n  unnest(log_vals) %>%\n  select(study_id, \n         TeamIdentifier,\n         estimate_type, \n         starts_with(\"response_\"), \n         -response_id_S2, \n         ends_with(\"_log\")) %>% \n  group_by(estimate_type) %>% \n  nest()\n  \n\nmod_data_logged <- raw_mod_data_logged %>% \n  mutate(MA_mod = \n           map(data, \n               ~fit_MA_mv(.x, mean_log, std.error_log, \"yi\")))\n\n\nplot_data_logged <- mod_data_logged %>% \n  mutate(tidy_mod = map(.x = MA_mod,\n                        ~broom::tidy(.x,\n                                     conf.int = TRUE, \n                                     include_studies = TRUE) %>% \n                          rename(study_id = term))) %>% \n  select(tidy_mod) %>% \n  unnest(cols = c(tidy_mod)) \n\nplot_data_logged %>% \n  mutate(response_scale = map2(estimate, std.error, log_back, 1000)) %>% \n  select(estimate_type, study_id, type, response_scale) %>% \n  unnest(response_scale) %>% \n  rename(estimate = mean_origin, conf.low = lower, conf.high = upper) %>% \n#  filter(estimate <1000) %>% \n  plot_forest_2(MA_mean = T,y_zoom = c(0,140))\n```\n\n::: {.cell-output-display}\n![Forest plot of meta-analytic estimated out of sample  predictions, $y_{i}$, on the response-scale (stems counts), for *Eucalyptus* analyses. Circles represent individual analysis estimates. Triangles represent the meta-analytic mean for each prediction scenario. Navy blue coloured points correspond to $y_{25}$ scenario, blue coloured points correspond to the $y_{50}$ scenario, while light blue points correspond to the $y_{75}$ scenario. Error bars are 95% confidence intervals. Outliers (observations more than 3SD above the mean) have been removed prior to model fitting.](SM2_EffectSizeAnalysis_files/figure-html/fig-euc-yi-forest-plot-full-1.png){#fig-euc-yi-forest-plot-full width=672}\n:::\n:::\n",
    "supporting": [
      "SM2_EffectSizeAnalysis_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}